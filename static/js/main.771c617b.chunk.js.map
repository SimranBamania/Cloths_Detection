{"version":3,"sources":["utilities.js","App.js","index.js"],"names":["labelMap","1","name","color","2","3","4","5","drawRect","boxes","classes","scores","threshold","imgWidth","imgHeight","ctx","clearRect","i","length","y","x","height","width","text","strokeStyle","lineWidth","fillStyle","font","beginPath","fillText","toFixed","rect","stroke","App","webcamRef","useRef","canvasRef","runCoco","a","tf","net","setInterval","detect","current","video","readyState","videoWidth","videoHeight","img","fromPixels","resized","resizeBilinear","casted","cast","expanded","expandDims","executeAsync","obj","console","array","log","getContext","requestAnimationFrame","useEffect","className","ref","muted","style","position","marginLeft","marginRight","left","right","textAlign","zindex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.771c617b.chunk.js","sourcesContent":["// Define our labelmap\nconst labelMap = {\n    1:{name:'Text', color:'red'},\n    2:{name:'Solid', color:'yellow'},\n    3:{name:'Pattern', color:'lime'},\n    4:{name:'PatternPants', color:'blue'},\n    5:{name:'SolidPants', color:'pink'},\n}\n\n// Define a drawing function\nexport const drawRect = (boxes, classes, scores, threshold, imgWidth, imgHeight, ctx) => {\n    // Clear the canvas\n    ctx.clearRect(0, 0, imgWidth, imgHeight);\n    for (let i = 0; i < boxes.length; i++) {\n        if (boxes[i] && classes[i] && scores[i] > threshold) {\n            // Extract variables\n            const [y, x, height, width] = boxes[i];\n            const text = classes[i];\n            // Set styling\n            ctx.strokeStyle = labelMap[text]['color'];\n            ctx.lineWidth = 2; // Adjusted for better visibility\n            ctx.fillStyle = 'white';\n            ctx.font = '18px Arial'; // Adjusted for better visibility\n            // DRAW!!\n            ctx.beginPath();\n            ctx.fillText(\n                `${labelMap[text]['name']} - ${(scores[i] * 100).toFixed(2)}%`,\n                x * imgWidth,\n                y * imgHeight - 10\n            );\n            ctx.rect(\n                x * imgWidth,\n                y * imgHeight,\n                (width - x) * imgWidth,\n                (height - y) * imgHeight\n            );\n            ctx.stroke();\n        }\n    }\n};\n\n\n\n","// Import dependencies\nimport React, { useRef, useState, useEffect } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { nextFrame } from \"@tensorflow/tfjs\";\n// 2. TODO - Import drawing utility here\nimport {drawRect} from \"./utilities\"; \n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Main function\n  const runCoco = async () => {\n    // 3. TODO - Load network \n    const net = await tf.loadGraphModel('https://nexrender-backend-9320740.s3.ap-south-1.amazonaws.com/simran/model.json')\n    \n    // Loop and detect hands\n    setInterval(() => {\n      detect(net);\n    }, 16.7);\n  };\n\n  const detect = async (net) => {\n    // Check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // 4. TODO - Make Detections\n      const img = tf.browser.fromPixels(video)\n      const resized = tf.image.resizeBilinear(img, [640,480])\n      const casted = resized.cast('int32')\n      const expanded = casted.expandDims(0)\n      const obj = await net.executeAsync(expanded)\n\n      console.log(await obj[4].array())\n      \n      const boxes = await obj[0].array()\n      const classes = await obj[1].array()\n      const scores = await obj[4].array()\n    \n      // Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n\n      // 5. TODO - Update drawing utility\n      // drawSomething(obj, ctx)  \n      requestAnimationFrame(()=>{drawRect(boxes[0], classes[0], scores[0], 0.9, videoWidth, videoHeight, ctx)}); \n\n      tf.dispose(img)\n      tf.dispose(resized)\n      tf.dispose(casted)\n      tf.dispose(expanded)\n      tf.dispose(obj)\n\n    }\n  };\n\n  useEffect(()=>{runCoco()},[]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam\n          ref={webcamRef}\n          muted={true} \n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 8,\n            width: 640,\n            height: 480,\n          }}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}